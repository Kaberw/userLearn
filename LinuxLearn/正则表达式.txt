
grep的进阶用法：

	grep [-A] [-B] [--color==auto] '搜寻字符串' filename
		-A : 后面可加数字,表示除了搜寻到的列还要显示后续n列
		-B : 后面可加数字,表示before
		--color=auto : 将正确取到的数据用颜色显示
		
	dmesg | grep 'qxl' --- dmesg列出核心讯息,再用grep找出含qxl那行
	dmesg | grep -n -A3 -B2 --color=auto 'qxl'


	grep 在数据中查寻一个字符串时,是以 "整行" 为单位来进行数据的撷取的！ -n 显示行号


	grep -n 'the' regular_express.txt  ---- 搜寻带the的那些行

	grep -vn 'the' regular_express.txt  ---- 搜寻不带the的那些行

	grep -n 't[ae]st' regular_express.txt  ---- 搜寻带tast或test的那些行

	grep -n '[^g]oo' regular_express.txt --- 搜寻带oo且不以g在前的那些行

	grep -n '[^a-z]oo' regular_express.txt --- 不以小写字符的oo行

	grep -n '[^[:lower:]]oo' regular_express.txt --- 同上


	grep -n '^[a-z]' regular_express.txt --- 以小写字符开头的行

	grep -n '^[^a-zA-Z]' regular_express.txt --- 不以字母开头的行

	grep -n '\.$' regular_express.txt --- 以.结尾的行

	grep -v '^$' regular_express.txt --- 不要空白行


	. : 代表一定有一个任意字符
	* ： 代表前一个字符0到无穷多次

	grep -n 'g..d' regular_express.txt --- 截取带如good类字符的行(gd间有两个字符)


	grep -n 'o\{2\}' regular_express.txt --- 含有两个连续o的字符

	grep -n 'o\{2,\}' regular_express.txt  --- 含两个以上的o




	****『正规表示法的特殊字符』与一般在指令列输入指令的『通配符』并不相同

		--- 通配符中*代表任意0到无限多个字符

		

sed、awk工具：

	
	**** sed可以将数据进行取代、删除、新增、撷取特定行等等
	
	sed [-nefr] [动作]
		-n : 使用安静模式,只有经过sed特殊处理的那一行才会列出来
		-e ：直接在指令列模式上进行sed的动作编辑
		-f ：直接将sed的动作写在一个文件内,-f filename则可以执行filename内的sed动作
		-r ：sed的动作支持的是延伸性正规表示法的语法(预设是基础)
		-i ：直接修改读取的文件内容,不是由屏幕输出
	
	动作说明：[n1][,n2]function
		n1,n2 ：不见得会存在,一般代表[选择进行动作行数),如在10到20之间进行选择
		
	function底下有这些东西:
		a : 新增,后面可接字符串,字符串会在新的一行出现(下一行)
		c : 取代,后可接字符串,取代n1,n2之间的行
		d ：删除
		i ：插入,后面可接字符串,字符串会在新的一行出现(上一行)
		p ：打印
		s ：取代,可以直接进行取代的工作
		

	nl /etc/passwd | sed '2,5d' --- 将文件内容列出并打印行号,同时将第2-5行删除
	
	nl /etc/passwd | sed '2a drink tea' --- 在第二行后面加上drink tea

	nl /etc/passwd | sed '2a drink tea or ....\drink beer ?'  --- 新增两行,用\分割
	
	nl /etc/passwd | sed '2,5c No 2-5 number'  ---- 以No 2-5 number 取代2-5行
	
	nl /etc/passwd | head -n 20 | tail -n 10  --- 列出11-20行

	nl /etc/passwd | sed -n '5,7p'  ---- 列出第5-7行
	
	
	
	sed 's/要被取代的字符串/新的字符串/g'
	
	
	/sbin/ipconfig eth0 查询ip
	
	/sbin/ipconfig eth0 | grep 'inet' | sed 's/^.*inet//g' | sed 's/*netmask.*$//g'
	
	
	直接修改文件内容(危险动作) --- sed -i 's/\.$/\!/g' regular_express.txt
		-i ：直接修改文件内容


	
延伸正规表示法：
	
	egrep -v '^$|^#' regular_express.txt  --- 去除空行和注释行
	
	
	+ ：重复一个或一个以上的前一个字符
	？：零个或一个前一个字符
	| ：用or的方式找出数个字符串
	() : 找出群组字符串
	()+ : 找出多个重复群组的判别
	
	！>不是特殊的字符
	
	
文件的格式化与相关处理

	printf '打印格式' 实际内容
	
		printf '%s\t %s\t %s\t %s\t %s\t \n' $(cat printf.txt)
		
		printf '%10s %5i %5i %5i %8.2f \n'  $(cat printf.txt)

		printf '\x45\n'  --- ASCII 'E'
	
	
	sed 常常作用于一整个行的处理
	
	
	awk '条件类型1{动作1} 条件类型2{动作2} ...' filename
	
		awk 主要是处理『每一行的字段内的数据』,而默认的『字段的分隔符为 "空格键" 或 "[tab]键" 』

		last -n 5 | awk '{print $1 "\t" $3}' --- 

		每一行的每个字段都是有变量名称的,那就是 $1, $2... 等变量名称,$0 代表『一整行资料』的意思

		awk的处理流程：
			1. 读入第一行,并将第一行的资料填入 $0, $1, $2.... 等变数当中；
			2. 依据 "条件类型" 的限制,判断是否需要进行后面的 "动作"；
			3. 做完所有的动作与条件类型；
			4. 若还有后续的『行』的数据,则重复上面 1~3 的步骤,直到所有的数据都读完为止。	

		内建变量：
			NF ：每一行拥有字段总数
			NR ：目前awk所处理的是第几行数据
			FS ：目前的分割字符,默认是空格
			
		last -n 5 | awk '{print $1 "\t lines: " NR "\t colums: " NF}'  ---- 列出每行账号,列出目前处理的行数,列出该行有多少字段
	
	
		逻辑运算字符：
		
			cat /etc/passwd | awk '{FS=":"} $3 < 10 {print $1 "\t" $3}' --- 列出第三栏小于10的数据,以：分割
			
			cat pay.txt | awk 'NR==1 {printf "%10s %10s %10s \n",$1,$2,$3,"Total"}
			NR>=2{total = $2 + $3 printf "%10s %10d %10d %10.2f \n",$1,$2,$3,total}'  --- 计算变量功能
			
			支持if(NR==1)条件操作
			
		
	
	
	
	
	
		