文件的时间：
	modification time (mtime)：
		当该文件的『内容数据』变更时，就会更新这个时间！内容数据指的是文件的内容，而不是文件的属性或权限喔！
	status time (ctime)：
		当该文件的『状态 (status)』改变时，就会更新这个时间，举例来说，像是权限与属性被更改了，都会更新这个时间啊。
	access time (atime)：
		当『该文件的内容被取用』时，就会更新这个读取时间 (access)。举例来说，我们使用 cat 去读取/etc/man_db.conf ， 就会更新该文件的 atime 了。
	
	touch -- 建立一个空的文件(非目录mkdir)   将某个文件日期修订为目前
	
	umask -- 目前用户在建立文件或目录的时候的权限默认值(该默认值需要减掉的权限) -S 具体显示
		若使用者建立为『文件』则预设『没有可执行( x )权限』，亦即只有 rw 这两个项目，也就是最大为 666 分，预设权限如下：
			-rw-rw-rw-
		若用户建立为『目录』，则由于 x 与是否可以进入此目录有关，因此默认为所有权限均开放，亦即为 777 分，预设权限如下：
			drwxrwxrwx
	
	umask 002 -- 设定默认权限
	
	chattr -- 该指令支持Ext2/Ext3/Ext4的传统系统文件 xfs仅支持部分 作用配置文件隐藏属性
	lsattr -- 显示文件隐藏属性
	
	SUID功能与限制：(仅对文件)
		SUID 权限仅对二进制程序(binary program)有效
		执行者对于该程序需要具有 x 的可执行权限
		本权限仅在执行该程序的过程中有效 (run-time)
		执行者将具有该程序拥有者 (owner) 的权限

	SGID对文件功能：(针对文件和目录)
		SGID 对二进制程序有用
		程序执行者对于该程序来说，需具备 x 的权限
		执行者在执行的过程中将会获得该程序群组的支持
	SGID对目录功能：
		用户若对于此目录具有 r 与 x 的权限时，该用户能够进入此目录
		用户在此目录下的有效群组(effective group)将会变成该目录的群组
		用途：若用户在此目录下具有 w 的权限(可以新建文件)，则使用者所建立的新文件，该新文件的群组与此目录的群组相同

	SBIT作用：(对目录)
		当用户对于此目录具有 w, x 权限，亦即具有写入的权限时
		当用户在该目录下建立文件或目录时，仅有自己与 root 才有权力删除该文件
		
	SUID/SGID/SBIT 权限设定：(4\2\1)
		chmod 4755 filename -- -rwsr-xr-x 在原有权限前面继续加入即可
		chmod 1755 filename -- -rwxr-xr-t
		chmod 7666 filename -- -rwSrwSrwT  666代表没有x权限 故大写代表为空的
		符号处理：(SUID=u+s\SGID=g+s\SBIT=o+t)
		chmod u=rwxs,go=x test -- -rws--x--x--x
		chmod g+s,o+t test -- -rws--s--t

	file ~/.bashrc -- 观察文件类型(ASCII或data文件或binary等)且有没有用到动态函式库(share library)
	
指令与文件的搜索：
	
	which [-a] command -- 脚本文件名搜索 -a代表将目录下所有找到的指令均列出
	
	whereis [-bmsu] 文件名或目录名 -- 只找系统中某些特定目录底下的文件 /bin/sbin底下执行档  /usr/share/man底下的man page文件等
		-l 列出查询的几个主要目录
		-b 只找binary格式文件
		-m 只找在说明文件manual路径下的文件
		-s 只找source来源文件
		-u 搜索不在上述三个项目当中的其他特殊文件
	locate [-ir] keyword -- 利用数据库来搜索文件名 /var/lib/mlocate(该数据库每天更新一次,可使用updatedb手动更新)
		-i 忽略大小写差异
		-c 不输出档名，仅计算找到文件数量
		-l 仅输出几行的意思
		-S 输出locate所使用的数据看文件的相关信息，包括该数据库记录的文件/目录数量等
		-r 后面可接正规表示法的显示方式	
	updatedb：根据 /etc/updatedb.conf 的设定去搜寻系统硬盘内的文件名，并更新 /var/lib/mlocate 内的数据库文件
	locate：依据 /var/lib/mlocate 内的数据库记载，找出用户输入的关键词文件名

	find -- 直接搜索硬盘内的文件系统(时间花费较大)
	
	
Ext2文件系统
	block限制：
		原则上，block 的大小与数量在格式化完就不能够再改变了(除非重新格式化)
		每个 block 内最多只能够放置一个文件的数据
		承上，如果文件大于 block 的大小，则一个文件会占用多个 block 数量
		承上，若文件小于 block ，则该 block 的剩余容量就不能够再被使用了(磁盘空间会浪费)
	
	inode记录的文件数据：
		该文件的存取模式(read/write/excute)；
		该文件的拥有者与群组(owner/group)；
		该文件的容量；
		该文件建立或状态改变的时间(ctime)；? 
		最近一次的读取时间(atime)；
		最近修改的时间(mtime)；
		定义文件特性的旗标(flag)，如 SetUID...；
		该文件真正内容的指向 (pointer)；
	inode特色：
		每个 inode 大小均固定为 128 bytes (新的 ext4 与 xfs 可设定到 256 bytes)；
		每个文件都仅会占用一个 inode 而已；
		承上，因此文件系统能够建立的文件数量与 inode 的数量有关；
		系统读取文件时需要先找到 inode，并分析 inode 所记录的权限与用户是否符合，若符合才能够开始实际读取 block 的内容。
	
	Superblock记录的信息：
		block 与 inode 的总量；
		未使用与已使用的 inode / block 数量；
		block 与 inode 的大小 (block 为 1, 2, 4K，inode 为 128bytes 或 256bytes)；
		filesystem 的挂载时间、最近一次写入数据的时间、最近一次检验磁盘 (fsck) 的时间等文件系统的相关信息；
		一个 valid bit 数值，若此文件系统已被挂载，则 valid bit 为 0 ，若未被挂载，则 valid bit 为 1 。
		
	dumpe2fs -- 查询Ext家族superblock信息的指令
	blkid -- 呼叫出系统有被格式化的装置
		
	文件系统的操作：
		df [-ahikHTm] [目录或文件名] -- 列出文件系统的整体磁盘使用量
			-a -- 列出所有的文件系统
			-k -- 以KBytes的容量显式各文件系统
			-m -- 以MBytes的容量显式各文件系统
			-h -- 以人们较易阅读的格式显式
			-H -- 以M=1000k的进位方式显式
			-T -- 连同该partition的filesystem名称也列出
			-i -- 以inode的数量显示
			
			输出结果：
				Filesystem：代表该文件系统是在哪个 partition ，所以列出装置名称；
				1k-blocks：说明底下的数字单位是 1KB 呦！可利用 -h 或 -m 来改变容量；
				Used：顾名思义，就是使用掉的磁盘空间啦！
				Available：也就是剩下的磁盘空间大小；
				Use%：就是磁盘的使用率啦！如果使用率高达 90% 以上时， 最好需要注意一下了，免得容量不足造成系统问题喔！(例如最容易被灌爆的 /var/spool/mail 这个放置邮件的磁盘)
				Mounted on：就是磁盘挂载的目录所在啦！(挂载点啦！)

		du [-ahskm] [文件目录或名称] -- 评估文件系统的磁盘使用量
			-a -- 列出所有的文件与目录容量
			-h -- 以人们较易阅读的格式显式
			-s -- 列出总量，而不列出各别目录占有容量
			-S -- 不包括目录下的总计
			-k -- 以KBytes的容量显式各文件系统
			-m -- 以MBytes的容量显式各文件系统		

		

	hard link(实体链接)限制：(在某个目录下新增一笔档名链接到某 inode 号码的关连记录而已)
		不能跨FileSystem
		不能link目录
		一般不占用inode 与 block
		
	Symbolic link(符号链接)(快捷方式)：(建立一个独立的文件，而这个文件会让数据的读取指向他 link 的那个文件的档名)
		连结档的重要内容就是他会写上目标文件的『文件名』
		会占用掉 inode 与 block

	制作链接档：
		ln [-sf] 来源文件 目标文件
		 -s -- 不加任何参数进行链接为hard link，-s为Symbolic link
		 -f -- 如果目标文件存在时，就主动将目标文件移除后再建立
		 
	
	分区操作：
		lsblk -- 列出系统上所以磁盘列表
		blkid -- 列出装置的UUID参数
		parted -- 列出磁盘的分区表类型与分区信息
	
		fdisk -- MBR分区表使用
		gdisk -- GPT分区表使用
		
		gdisk 装置名称(? for help)(不要处理正在活动的文件系统)
			cat /proc/partitions 显示记录分区信息
			partprobe -s -- 更新Linux核心的分区表信息 
			
		fdisk 装置名称(m for help)
		
		
	磁盘格式化：
		mkfs(make filesystem)
		mkfs.xfs 分区名称 -- 建立xfs文件系统
		mkfs.ext4
		
	文件系统检验：
		xfs_repair
		fsck.ext4
		
	文件系统挂载和卸除：
		单一文件系统不应该被重复挂载在不同的挂载点(目录)中；
		单一目录不应该重复挂载多个文件系统；
		要作为挂载点的目录，理论上应该都是空目录才是。	

		mount -- 将文件系统挂载到Linux目录上
			mount -o UUID="" 目录 -- 挂载到某个目录
			mount -o remount,rw,auto / 重新挂载根目录
			mount --bind /var /data/var -- 创建链接
			
		/etc/filesystems：系统指定的测试挂载文件系统类型的优先级；
		/proc/filesystems：Linux 系统已经加载的文件系统类型。
		/lib/modules/$(uname -r)/kernel/fs/：Linux支持的文件系统驱动程序

		umount [-fn] -- 装置文件卸除
			-f : 强制卸除
			-l ：立刻卸除
			-n : 不更新的情况下卸除

		mknod [装置文件名][bcp][Major][Minor]-- 磁盘、文件系统的参数修订
		xfs_admin [-lu] [-L label][-U uuid]-- 修改xfs文件系统的UUID与Label name
		tune2fs [-l][-L label][-U uuid] -- 修改ext4


		/etc/fstab -- 设置挂载
			根目录 / 是必须挂载的﹐而且一定要先于其它 mount point 被挂载进来。
			其它 mount point 必须为已建立的目录﹐可任意指定﹐但一定要遵守必须的系统目录架构原则 (FHS)
			所有 mount point 在同一时间之内﹐只能挂载一次。
			所有 partition 在同一时间之内﹐只能挂载一次。
			如若进行卸除﹐您必须先将工作目录移到 mount point(及其子目录) 之外。

			磁盘装置文件名/UUID/LABEL name  挂载点 (mount point)  磁盘分区槽的文件系统  文件系统参数  能否被 dump 备份指令作用  是否以 fsck 检验扇区

	
	建立swap分区槽：
		1. 分区：先使用 gdisk 在你的磁盘中分区出一个分区槽给系统作为 swap 。由于 Linux 的 gdisk 预设会将分区槽的 ID 设定为 Linux 的文件系统，所以你可能还得要设定一下 system ID 就是了。
		2. 格式化：利用建立 swap 格式的『mkswap 装置文件名』就能够格式化该分区槽成为 swap 格式啰
		3. 使用：最后将该 swap 装置启动，方法为：『swapon 装置文件名』。
		4. 观察：最终透过 free 与 swapon -s 这个指令来观察一下内存的用量吧！

		使用大文件利用 loop 指令建造
			dd if=/dev/zero of=/temp/swap bs=1M count=128
			mkswap /temp/swap
			swapon /temp/swap
			swapoff /temp/swap /dev/vda6

	ll -sh -- 查看文件block使用
	parted [装置][指令[参数]] -- 分区,不区分gdisk或fdisk
		

压缩操作：

	gzip [-cdtv#] 档名(在预设的状态下原本的文件会被压缩成为.gz 的档名，源文件就不再存在了)
		-c ：将压缩的数据输出到屏幕上
		-d ：解压缩参数
		-t ：检验压缩文件的一致性
		-v ：可以用来显示原文件/压缩文件的压缩比
		-# ：#为数字，代表压缩等级	
	zcat、zmore、zless -- 读取纯文本文件被压缩后的压缩文件
	egrep -- 查找压缩文件中关键字
	
	
	bzip2 [-cdkzv#] 档名
		-c ：将压缩的数据输出到屏幕上
		-d ：解压缩参数
		-k ：保留原文件
		-z ：压缩的参数
		-v ：可以用来显示原文件/压缩文件的压缩比
		-# ：#为数字，代表压缩等级	
	bzcat/bzmore/bzless/bzgrep

	
	xz [-dtlkc#] 档名
		-d ：解压缩参数
		-t ：测试解压缩完整性
		-l ：列出压缩文件相关信息
		-k ：保留原文件
		-c ：将压缩的数据输出到屏幕上
		-# ：#为数字，代表压缩等级
	xzcat/xzmore/xzless/xzgrep
		
		
	tar(打包文件夹)：
		压 缩：tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称
		查 询：tar -jtv -f filename.tar.bz2
		解压缩：tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录

		
	xfsdump(文件系统的备份)：
		xfsdump 不支援没有挂载的文件系统备份！所以只能备份已挂载的！
		xfsdump 必须使用root 的权限才能操作(涉及文件系统的关系)
		xfsdump 只能备份XFS 文件系统啊！
		xfsdump 备份下来的数据(文件或储存媒体) 只能让xfsrestore 解析
		xfsdump 是透过文件系统的UUID 来分辨各个备份档的，因此不能备份两个具有相同UUID 的文件系统喔！		
		
	xfsrestore(文件系统还原)	
	
	光盘备份通常操作：
		先将所需要备份的数据建置成为一个映像档(iso)，利用mkisofs 指令来处理；
		将该映像文件刻录至光盘或DVD 当中，利用cdrecord 指令来处理。
		
		mkisofs：建立映像档
		wodim、cdrecord：光盘刻录工具
		
	其他备份指令：dd   cpio	
	
