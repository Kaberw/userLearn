认识和学习Bash：

	计算机工作三部曲：
		1. 硬件：当然就是需要你的硬件有『声卡芯片』这个配备，否则怎么会有声音；
		2. 核心管理：操作系统的核心可以支持这个芯片组,当然还需要提供芯片的驱动程序啰；
		3. 应用程序：需要使用者 (就是你) 输入发生声音的指令啰。
		
	Bash Shell功能：
		命令编修能力 (history)：([上下键] 记忆使用过的指令  位于家目录的.bash_history文件中)
		命令与文件补全功能：([tab] 按键的好处)
		命令别名设定功能：(alias)
		工作控制、前景背景控制：(job control, foreground, background)
		通配符：(Wildcard)

	type [-tpa] name --- 查询指令是否为bash内建指令
		: 不加任何选项和参数时，type会显示name是外部指令还是bash内建指令
		-t : file(表示外部指令)  alias(表示为别名设定的名称)  builtin(表示为bash内建指令)
		-p : 为外部指令时会显示完整文件名
		-a : 会由PATH变量定义的路径中将所有含name的指令都列出来,包含alias
	
	\[Enter] : 跳脱,在下一行继续输入
	
	[ctrl]+u/[ctrl]+k : 从光标处向前或向后删除指令串
	[ctrl]+a/[ctrl]+e : 让光标移动到整个指令串最前面或最后面


变量功能
		
	echo : 变量的取用 echo $variable == echo ${variable}
	
	设置变量 ： myname = wukx    echo ${myname} ===> 输出wukx
	
	变量的设定规则：
		1. 变量与变量内容以一个等号『=』来连结
		2. 等号两边不能直接接空格符
		3. 变量名称只能是英文字母与数字，但是开头字符不能是数字
		4. 变量内容若有空格符可使用双引号『"』或单引号『'』将变量内容结合起来
			双引号内的特殊字符如 $ 等，可以保有原本的特性  ===>"$LANG" -> 输出"zh_TW.UTF-8"
			单引号内的特殊字符则仅为一般字符 (纯文本)  ===>'$LANG' -> 输出"$LANG"
		5. 可用跳脱字符『\』将特殊符号(如[Enter],$,\,空格符,'等)变成一般字符
		6. 在一串指令的执行中，还需要藉由其他额外的指令所提供的信息时，可以使用反单引号『`指令`』或『$(指令)』
			===> version=$(uname -r)』再『echo $version』可得『3.10.0-229.el7.x86_64』
		7. 若该变量为扩增变量内容时，则可用 "$变量名称" 或 ${变量} 累加内容
		8. 若该变量需要在其他子程序执行，则需要以 export 来使变量变成环境变量
		9. 通常大写字符为系统默认变量，自行设定变量可以使用小写字符，方便判断
		10. 取消变量的方法为使用 unset ：『unset 变量名称』
	
	env : 列出所有的环境变量的值及其变量值
	
	set : 观察所有变量(含环境变量和自定义变量)
		PS1 : 提示字符的设定
		$ : 关于shell的PID
		？ ： 关于上个执行命令的回传值(执行成功为0,不成功则为错误码)
		OSTYPE, HOSTTYPE, MACHTYPE : 主机硬件与核心等级
		
	子进程仅会继承父程序的环境变量,子程序不会继承父程序的自定义变量
	
	export [变量名称] --- 分享自己的变量设定给后来呼叫的文件或其他程序 自定义变量转环境变量
	
	locale -a --- 查询语系
	
	/usr/lib/locale/ --- 语系目录
	/etc/locale.conf --- 语系配置文件
	
	read [-pt] variable --- 等待用户输入
		-p : 后面接提示字符
		-t : 后面接等待的时间(s)
		
	declare/typeset --- 宣告变量类型
	
	--- 默认情况下变量为字符串类型
	--- bash中数值运算最多能到达整数形态
	
		declare ： 
			-a : 将后面变量定义为数组
			-i : 将后面变量定义为整数数字
			-x : 与export一样,将变量转换成环境变量 +x 取消动作
			-r : 将变量设置成readonly类型,不能unset
			-p : 单独列出变量类型
		
		var[index] = content --- 定义数组
		
	
	ulimit --- 与文件系统及程序限制关系
	
	
	变量修改：
	
		删除：
			echo ${path#/*:} -- 字符匹配删除(#向后删除  %向前删除)
				--- # % ：符合取代文字的『最短的』那一个
				--- ## %% ：符合取代文字的『最长的』那一个
	
		取代：
			echo ${path/sbin/SBIN} --- 将sbin取代为SBIN
				/ --- 取代一次
				//sbin/SBIN --- 全部取代
	
	
	alias --- 给命令设置别名  alias rm='rm -i'
	unalias --- 取消别名  unalias rm
	
	
	命令别名与变量区别：命令别名是可以直接下达的指令,而变量需要类似echo指令才能够呼出变量的内容
	
	
	history --- 查询曾经下达过的指令
		n : 列出最近n笔命令
		c ：将目前shell中所有history内容全部消除
		[-raw] histfile
			a ：将目前新增的history指令新增入hisfiles中,若没加则预设写入~/.bash_history
			r : 将histfiles的内容读到目前这个shell的history记忆中
			w ：将目前的history记忆内容写入histfiles中
			
	！number ：执行第几笔指令(历史中)
	！command ：由最近指令向前搜索以command开头的指令并执行
	！！：执行上一个指令
	
	
	指令的运作顺序：
		1. 以相对/绝对路径执行指令，例如『 /bin/ls 』或『 ./ls 』
		2. 由 alias 找到该指令来执行
		3. 由 bash 内建的 (builtin) 指令来执行
		4. 透过 $PATH 这个变量的顺序搜寻到的第一个指令来执行
	
	
	type -a ls --- 查询指令ls的搜寻顺序
	
	/etc/issue --- 进站画面欢迎字符串写入文件,可自己修改
	/etc/issue.net --- 提供给telnet远程登录程序使用,使用telnet登录到主机会显示此文件内容
	/etc/motd --- 写入一些让使用者登入后取得一些信息(root身份写入)
	
	
	自定义别名、自定义变量在注销bash后就失效
	
	
bash的环境配置文件：

	login shell：取得 bash 时需要完整的登入流程的,就称为 login shell
		举例来说:
			你要由 tty1 ~ tty6 登入,需要输入用户的账号与密码,此时取得的 bash 就称为login shell
	
		读取的配置文件：
			1. /etc/profile：这是系统整体的设定,你最好不要修改这个文件
			2. ~/.bash_profile 或 ~/.bash_login 或 ~/.profile：属于使用者个人设定,你要改自己的数据,就写入这里		
			
				/etc/profile(login shell才会读)：
				
					设定的变量：
						PATH：会依据 UID 决定 PATH 变量要不要含有 sbin 的系统指令目录
						MAIL：依据账号设定好使用者的 mailbox 到 /var/spool/mail/账号名
						USER：根据用户的账号设定此一变量内容
						HOSTNAME：依据主机的 hostname 指令决定此一变量内容
						HISTSIZE：历史命令记录笔数。CentOS 7.x 设定为 1000 
						umask：包括 root 默认为 022 而一般用户为 002 等
						
					呼叫外部设定数据：
						/etc/profile.d/*.sh ： (使用者需要具有该文件r权限)规范bash操作接口的颜色、语系、ll与ls指令别名、vi别名、which别名等,可用于设定共享别名(建立.sh文件)
						/etc/locale.conf ：配置bash预设使用何种语系
						/usr/share/bash-completion/completions/* ： 命令补齐、档名补齐、指令选项参数补齐等指令,由/etc/profile.d/bash_completion.sh 这个文件载入
				
					--- bash 的 login shell 情况下所读取的整体环境配置文件其实只有 /etc/profile,但是/etc/profile 还会呼叫出其他的配置文件
				
				
				~/.bash_profile (login shell 才会读)：(使用者个人配置文件)(设定PATH这个变量并转成环境变量)
					依照顺序读取下面中的某一个：
						1. ~/.bash_profile
						2. ~/.bash_login
						3. ~/.profile
				
				
				source 配置文件档名
				source ~/.bashrc == . ~/.bashrc  将目录内的设定读取到目前的bash环境中
				
	
	non-login shell：取得 bash 接口的方法不需要重复登入的举动
		举例来说:
			(1)你以 X window 登入 Linux 后,再以 X 的图形化接口启动终端机,此时那个终端接口并没有需要再次的输入账号与密码,那个 bash 的环境就称为 non-login shell 了
			(2)你在原本的 bash 环境下再次下达 bash 这个指令,同样的也没有输入账号密码,那第二个 bash (子程序) 也是 non-login shell 
	
	
		读取的配置文件：
			~/.bashrc(non-login shell会读)
			
			centos7.X会主动呼叫/etc/bashrc文件,定义一下数据：
				依据不同的 UID 规范出 umask 的值
				依据不同的 UID 规范出提示字符 (就是 PS1 变量)
				呼叫 /etc/profile.d/*.sh 的设定
	
	
	其他相关配置文件：
		/etc/man_db.conf ：下达man指令时查看数据路径
		~/.bash_history ：历史命令记录文件
		~/.bash_logout : 当我注销 bash 后,系统再帮我做完什么动作后才离开
		
	
	stty、set ： 终端机的环境设定
	
	stty -a --- 显示所有stty参数
		intr : 送出一个 interrupt (中断) 的讯号给目前正在 run 的程序 (就是终止啰！)
		quit : 送出一个 quit 的讯号给目前正在 run 的程序
		erase : 向后删除字符
		kill : 删除在目前指令列上的所有文字
		eof : End of file 的意思,代表结束输入
		start : 在某个程序停止后,重新启动他的 output
		stop : 停止目前屏幕的输出
		susp : 送出一个 terminal stop 的讯号给正在 run 的程序
		
	
	stdOut > >> : 1> 1>> 正确输出  2> 2>> 错误输出  >>(累加的方式) >(覆盖的方式)
	stdIn < <<
	
	
	cmd;cmd --- 连续下达指令
	$?(指令回传值) 与 cmd && cmd1 (cmd执行正确才执行cmd1)与 ||(cmd执行正确就不执行cmd1)
	
	
	| --- 管线命令
		管线命令仅会处理 standard output,对于 standard error output 会予以忽略
		管线命令必须要能够接受来自前一个指令的数据成为 standard input 继续处理才行
	
	
		cut -d'分割字符' -f fields
		cut -c 字符区间
			-d ：后面接分割字符,与-f一起使用
			-f ：依据-d的分割字符将一段讯息分成数段,用-f去除第几段的意思
			-c ：以字符的单位取出固定字符区间
			
		
		grep [-acinv] [--color=auto] '搜寻的字符串' filename --- 截取信息
			-a ：将binary文件以text文件的方式搜寻数据
			-c ：计算找到'搜寻字符串'的次数
			-i ：忽略大小写的不同
			-n ：输出行号
			-v ：反向选择,即显示出没有包含搜寻字符串内容那一行
			--color=auto ：将找到的关键字部分加上颜色显示
			
		last --- 查询系统上面有登陆主机者的身份
		
		sort [-fbMnrtuk] [file or stdin] --- 排序
			-f ：忽略大小写差异
			-b ：忽略最前空格
			-M ：以月份名排序
			-n ：以纯数字进行排序(默认以文字形态)
			-r ：反向排序
			-u ：相同数据仅出现一行代表
			-t ：分隔符,预设为tab键
			-k ：以哪个区间来进行排序
		
	
		uniq [-ic] --- 排序后重复资料仅显示一个
			-i : 忽略大小写字符的不同
			-c ：进行计数
	
	
		wc [-lwm] --- 计算输出的讯息整体数据
			-l : 仅列出行
			-w ：仅列出多少字
			-m ：多少字符
			
	
		tee [-a] file --- 双向重导向
			-a : 以累加的方式,将数据加到file中
		
	
		tr [-ds] SET1 --- 删除一段讯息当中的文字,或者是进行文字讯息的替换
			-d : 删除讯息当中的SET1这个字符串
			-s : 取代重复的字符
			
		col [-xb] --- -x 将tab键转换成对等的空格键
		
		
		join [til2] file1 file2 ---
			-t ：join默认以空字符分割,并且比对[第一个字段]数据
				 如果两文件相同,则将两笔数据联成一行,且第一个字段放在第一个
			-i ：忽略大小写差异
			-l ：这个是数字1,代表第一个文件要用哪个字段来分析
			-2 ：代表第二个文件要用那个字段来分析
			
			在使用 join 之前你所需要处理的文件应该要事先经过排序 (sort) 处理
	
	
		paste [-d] file1 file2 --- 直接将两行贴在一起,以分隔符分割
			-d : 后面接分隔符,预设以tab分割
			- ：如果file部分写成-,表示来自标准输入的资料
	
	
		expand [-t] file --- 将tab转成空格键
			-t ：后面接数字,一般一个tab占8个空格,我们可以自定义
	
	
		split [-bl] file PREFIX
			-b ：后面可接欲分区成的文件大小,可加单位,例如b、k、m等
			-l ：以行数来进行分区
			PREFIX ：代表前导符的意思,可以作为分区文件的前导文字
		
		
		xargs [-0epn] command --- 产生某个指令的参数的意思
			-0 : 输入含有特殊字符可将其还原成一般字符
			-e : EOF,分析到此字符时停止工作
			-p ：会询问使用者
			-n ：后面接次数,每次command执行指令时,要使用几个参数的意思
			
			很多指令其实并不支持管线命令,因此我们可以透过 xargs 来提供该指令引用 standard input 之用
	
	
		减号"-" --- 在管线命令当中,常常会使用到前一个指令的 stdout 作为这次的stdin,某些指令需要用到文件名 (例如 tar) 来进行处理时,该 stdin 与 stdout 可以利用减号 "-"来替代
	
	
