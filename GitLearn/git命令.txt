Git设置:
	git config --global user.name "name"
	git config --global user.email "youremail@example.com"
	git config --global color.ui true --- 显示颜色

	git config --global alias.st status --- 配置别名 st == status
	git config --global alias.unstage 'reset HEAD' --- unstage == reset HEAD
	git config --global alias.last 'log -1' --- last == log -1(显示最后一次提交信息)
	git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
	===>显示提交日志
	
	配置文件：
		--- 配置Git的时候,加上--global是针对当前用户起作用的;如果不加,那只针对当前的仓库起作用
		--- 配置文件位于：每个仓库的Git配置文件都放在.git/config文件 ―― cat .git/config
		--- 当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig ―― cat .gitconfig
	
	
忽略特殊文件

	--- 忽略某些文件时,需要编写.gitignore；
	--- .gitignore文件本身要放到版本库里,并且可以对.gitignore做版本管理
		# Windows:
		Thumbs.db
		ehthumbs.db
		Desktop.ini
		
	git add -f App.class --- 强制加入忽略的文件
	git check-ignore -v App.class  --- 检查忽略规则
	
	
Git版本库创建：
	建立新的目录;
	git init --- 初始化一个Git仓库(当前目录)
	git add <file> --- 可以多次使用,在仓库中添加多个文件[添加到缓存区]
	git commit -m <message> -- 提交并注释[提交到master分支]
	
	
Git版本管理：
	git status --- 掌握当前版本状态
	git diff <file> --- 查看文件修改情况

	
Git回退：
	git log --- 查看提交的历史记录
	git reflog --- 查看命令历史,以方便回到回退前
	HEAD --- 指向当前版本 HEAD^ --- 上一个版本  HEAD^^ --- 上上版本   HEAD~100 --- 上一百个版本
	git reset --hard <HEAD>|<ID> --- 回退到上某个版本或某个id版本
	
	git checkout -- <file> --- 撤销工作区的修改
	git reset HEAD <file> --- 撤销缓存区的修改
	--- 提交后的撤销采用版本回退

	git rm <file> --- 删除文件,需要git commit{comit后需恢复可采用版本回退}   
	git checkout -- <file> --- 本地误删恢复,只能恢复最后一次修改
	
	
创建SSH Key(远程传送代码GitHub等)：
	ssh-keygen -t rsa -C "youremail@example.com"  
	
	--- 会在用户目录中创建.ssh文件,里面有id_rsa和id_rsa.pub两个文件
	
	--- 这两个就是SSH Key的秘钥对,id_rsa是私钥,不能泄露出去,id_rsa.pub是公钥,可以放心地告诉任何人
	
	--- 登陆GitHub,打开“Account settings”,“SSH Keys”页面：
	
	--- 然后点“Add SSH Key”,填上任意Title,在Key文本框里粘贴id_rsa.pub文件的内容即可使用
	
	
远程推送至GitHub：
	--- 要关联一个远程库,使用命令git remote add origin git@server-name:path/repo-name.git
	
	--- 关联后,使用命令git push -u origin master第一次推送master分支的所有内容
	
	--- 此后,每次本地提交后,只要有必要,就可以使用命令git push origin master推送最新修改
	
	
从远程下载到本地：
	git clone git@github.com:Kaberw/QSBK-Python.git --- 将Kaberw/QSBK-Python.git下载至本地
	
	--- 要克隆一个仓库,首先必须知道仓库的地址,然后使用git clone命令克隆

	--- Git支持多种协议,包括https,但通过ssh支持的原生git协议速度最快
	
	
创建分支与分支合并：
	git checkout -b dev == git branch dev ； git checkout dev --- 创建新的分支dev
	git checkout master --- 转换到master分支
	git merge dev --- 合并dev分支至当前分支(master)
	git branch -d dev --- 删除分支dev
	
	查看分支：git branch
	创建分支：git branch <name>
	切换分支：git checkout <name>
	创建+切换分支：git checkout -b <name>
	合并某分支到当前分支：git merge <name>
	删除分支：git branch -d <name>
	
	git log --graph --pretty=oneline --abbrev-commit  --- 查看分支合并情况
	
	git merge --no-ff -m "merge with no-ff" dev  --- 合并分支不采用Fast forward模式,合并后的历史有分支,能看出来曾经做过合并
	
	git stash --- 挂起当前分支的修改
	git stash list --- 查看当前挂起链表
	git stash apply --- 获取当前挂起的修改
	git stash drop --- 删除顶端挂起的更改
	git stash pop --- 弹出挂起的更改
	git stash apply stash@{0}
	
	git branch -D <name> --- 丢弃一个没有被合并过的分支,强行删除
	
	
远程：
	git remote --- 查看远程信息
	git remote -v --- 查看详细信息
	
	git push origin master --- 将分支推送到远程库
	
		--- master分支是主分支，因此要时刻与远程同步；
		--- dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
		--- bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
		--- feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发
		
	git branch --set-upstream-to=origin/dev dev --- 建立与远程分支链接
	git pull --- 获取远程文件
	
	
多人协作模式：
	1、首先,可以试图用git push origin <branch-name>推送自己的修改;

	2、如果推送失败,则因为远程分支比你的本地更新,需要先用git pull试图合并;

	3、如果合并有冲突,则解决冲突,并在本地提交;

	4、没有冲突或者解决掉冲突后,再用git push origin <branch-name>推送就能成功！

	** 如果git pull提示no tracking information,则说明本地分支和远程分支的链接关系没有创建,
	   用命令git branch --set-upstream-to <branch-name> origin/<branch-name>.
	
	
	--- 查看远程库信息,使用git remote -v;

	--- 本地新建的分支如果不推送到远程,对其他人就是不可见的;

	--- 从本地推送分支,使用git push origin branch-name,如果推送失败,先用git pull抓取远程的新提交;

	--- 在本地创建和远程分支对应的分支,使用git checkout -b branch-name origin/branch-name,本地和远程分支的名称最好一致;

	--- 建立本地分支和远程分支的关联,使用git branch --set-upstream branch-name origin/branch-name;

	--- 从远程抓取分支,使用git pull,如果有冲突要先处理冲突.
	
	
	rebase操作可以把本地未push的分叉提交历史整理成直线；
	rebase的目的是使得我们在查看历史提交的变化时更容易,因为分叉的提交需要三方对比。
	
	
标签：
	git tag <name>  --- 创建一个标签(默认标签打在最新提交的commit上)
	
	git log --pretty=oneline --abbrev-commit --- 找到历史提交的id
	git tag <name> id  --- 为某次提交加标签
	
	git tag --- 显示所有标签
	
	git show <tagname> --- 显示标签信息
	
	git tag -a v0.1 -m "version 0.1 released" 1094adb  --- 指定说明文字
	
	** 标签总是和某个commit挂钩;如果这个commit既出现在master分支,又出现在dev分支,那么在这两个分支上都可以看到这个标签.
	
	命令git tag <tagname>用于新建一个标签,默认为HEAD,也可以指定一个commit id;
	命令git tag -a <tagname> -m "blablabla..."可以指定标签信息;
	命令git tag可以查看所有标签.
	
	
	git tag -d <tagname>  --- 删除标签
	
	git push origin <tagname> --- 推送标签到远程
	
	git push origin --tags  --- 一次性推送所有标签
	
	git tag -d v0.9  git push origin :refs/tags/v0.9  --- 删除远程标签要先删除本地标签
	
	命令git push origin <tagname>可以推送一个本地标签;
	命令git push origin --tags可以推送全部未推送过的本地标签;
	命令git tag -d <tagname>可以删除一个本地标签;
	命令git push origin :refs/tags/<tagname>可以删除一个远程标签.
	
	
GitHub:
	--- 在GitHub上,可以任意Fork开源仓库;
	--- 自己拥有Fork后的仓库的读写权限;
	--- 可以推送pull request给官方仓库来贡献代码.
	
	
关联多个库：
	git remote rm origin --- 删除关联的库origin

	git remote add github git@github.com:michaelliao/learngit.git --- 关联GitHub 库名：github
	git remote add gitee git@gitee.com:liaoxuefeng/learngit.git --- 关联码云 库名：gitee
	git remote -v  --- 查看远程信息
	
	git push github master --- 推送到github
	git push gitee master --- 推送到gitee
	
	
搭建Git服务器：
	采用Linux系统：(Ubuntu)
		sudo apt-get install git --- 安装Git
		sudo adduser git --- 创建一个Git用户,用来运行git服务
		创建登录证书 --- 收集所有需要登录的用户的公钥,就是他们自己的id_rsa.pub文件,把所有公钥导入到/home/git/.ssh/authorized_keys文件里,一行一个
		初始化git仓库 --- 选定一个目录作为Git仓库,假定是/srv/sample.git
			在/srv目录下输入命令:sudo git init --bare sample.git
			将owner改为git(不让用户直接登录到服务器上去改工作区):sudo chown -R git:git sample.git
		禁用shell登录 --- 编辑/etc/passwd文件：将git:x:1001:1001:,,,:/home/git:/bin/bash行改为git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
		克隆远程仓库 --- 在各自电脑运行：git clone git@server:/srv/sample.git
		
		--- 搭建Git服务器非常简单，通常10分钟即可完成；
		--- 要方便管理公钥，用Gitosis；
		--- 要像SVN那样变态地控制权限，用Gitolite
		